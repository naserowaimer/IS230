-- MySQL Script generated by MySQL Workbench
-- Sat Mar  8 23:11:02 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema KSU_Helpdesk
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema KSU_Helpdesk
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `KSU_Helpdesk` DEFAULT CHARACTER SET utf8 ;
USE `KSU_Helpdesk` ;

-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`User` (
  `username` VARCHAR(50) CHARACTER SET 'DEFAULT' NOT NULL,
  `fullname` VARCHAR(100) NOT NULL,
  `mobileNumber` INT NOT NULL,
  `college` VARCHAR(50) NOT NULL,
  `depart` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`username`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Ticket` (
  `TicketID` VARCHAR(50) NOT NULL COMMENT 'primary key, and not null, also it should be unique.\nVarchar(50) because the ticket may have an ID as Ticket000 or T000 or any other forms that contains letters',
  `opening_date` DATETIME NOT NULL,
  `User_username` VARCHAR(50) CHARACTER SET 'DEFAULT' NOT NULL,
  PRIMARY KEY (`TicketID`),
  UNIQUE INDEX `TicketID_UNIQUE` (`TicketID` ASC) VISIBLE,
  INDEX `fk_Ticket_User1_idx` (`User_username` ASC) VISIBLE,
  CONSTRAINT `fk_Ticket_User1`
    FOREIGN KEY (`User_username`)
    REFERENCES `KSU_Helpdesk`.`User` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Rating`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Rating` (
  `ratingID` VARCHAR(50) NOT NULL,
  `TicketID` VARCHAR(50) NOT NULL,
  `category` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ratingID`, `TicketID`),
  INDEX `fk_Rating_Ticket_idx` (`TicketID` ASC) VISIBLE,
  CONSTRAINT `fk_Rating_Ticket`
    FOREIGN KEY (`TicketID`)
    REFERENCES `KSU_Helpdesk`.`Ticket` (`TicketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Fix`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Fix` (
  `fix_num` INT NOT NULL,
  `fix_des` VARCHAR(100) NOT NULL,
  `TicketsAmount` INT GENERATED ALWAYS AS (),
  PRIMARY KEY (`fix_num`),
  UNIQUE INDEX `fix_num_UNIQUE` (`fix_num` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Technican`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Technican` (
  `employeeID` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`employeeID`),
  UNIQUE INDEX `employeeID_UNIQUE` (`employeeID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Fix_prereq_Fix`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Fix_prereq_Fix` (
  `fix_num` INT NOT NULL,
  `prereq_fix` INT NOT NULL,
  INDEX `fk_Fix_has_Fix_Fix2_idx` (`prereq_fix` ASC) VISIBLE,
  INDEX `fk_Fix_has_Fix_Fix1_idx` (`fix_num` ASC) VISIBLE,
  PRIMARY KEY (`fix_num`, `prereq_fix`),
  CONSTRAINT `fk_Fix_has_Fix_Fix1`
    FOREIGN KEY (`fix_num`)
    REFERENCES `KSU_Helpdesk`.`Fix` (`fix_num`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fix_has_Fix_Fix2`
    FOREIGN KEY (`prereq_fix`)
    REFERENCES `KSU_Helpdesk`.`Fix` (`fix_num`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Fix_solve_Ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Fix_solve_Ticket` (
  `Ticket_TicketID` VARCHAR(50) NOT NULL,
  `Fix_fix_num` INT NOT NULL,
  PRIMARY KEY (`Ticket_TicketID`, `Fix_fix_num`),
  INDEX `fk_Ticket_has_Fix_Fix1_idx` (`Fix_fix_num` ASC) VISIBLE,
  INDEX `fk_Ticket_has_Fix_Ticket1_idx` (`Ticket_TicketID` ASC) VISIBLE,
  CONSTRAINT `fk_Ticket_has_Fix_Ticket1`
    FOREIGN KEY (`Ticket_TicketID`)
    REFERENCES `KSU_Helpdesk`.`Ticket` (`TicketID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Ticket_has_Fix_Fix1`
    FOREIGN KEY (`Fix_fix_num`)
    REFERENCES `KSU_Helpdesk`.`Fix` (`fix_num`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`technican_emails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`technican_emails` (
  `email` VARCHAR(50) NOT NULL,
  `Technican_eID` INT NOT NULL,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  PRIMARY KEY (`Technican_eID`),
  CONSTRAINT `fk_technican_emails_Technican1`
    FOREIGN KEY (`Technican_eID`)
    REFERENCES `KSU_Helpdesk`.`Technican` (`employeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `KSU_Helpdesk`.`Technican_workon_Fix`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KSU_Helpdesk`.`Technican_workon_Fix` (
  `Fix_fix_num` INT NOT NULL,
  `Technican_employeeID` VARCHAR(50) NOT NULL,
  `Note` VARCHAR(255) NULL,
  PRIMARY KEY (`Fix_fix_num`, `Technican_employeeID`),
  INDEX `fk_Fix_has_Technican_Technican1_idx` (`Technican_employeeID` ASC) VISIBLE,
  INDEX `fk_Fix_has_Technican_Fix1_idx` (`Fix_fix_num` ASC) VISIBLE,
  CONSTRAINT `fk_Fix_has_Technican_Fix1`
    FOREIGN KEY (`Fix_fix_num`)
    REFERENCES `KSU_Helpdesk`.`Fix` (`fix_num`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Fix_has_Technican_Technican1`
    FOREIGN KEY (`Technican_employeeID`)
    REFERENCES `KSU_Helpdesk`.`Technican` (`employeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
